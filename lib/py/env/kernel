
function py/env/ls() {
  local _a=""
  local i
  for i in $(ls -d */) ; do
    _a="${i}bin/activate"
    if ! readable "${_a}" ; then
      continue
    fi
    cat "${_a}" | grep VIRTUAL &> /dev/null
    if failed $? ; then
      continue
    fi
    # echo "${i%%/}"
    i="${i%%/}"
    du -sh "${i}"
  done
}

function py/env/stop() {
  if test -r "${py_env_rc}" ; then
    rm -f "${py_env_rc}"
  fi
}

function py/env/login() {
  local _v=$*
  _v=${_v%%/}
  if empty "${_v}" ; then $failure ; fi

  if ! test -d "${_v}" ; then
    $failure
  fi

  answer "Login to ${_v}?"
  if failed $? ; then
    $failure
  fi
  trap py/env/stop INT TERM EXIT
  cd "${_v}"
  cat <<EOF > "${py_env_rc}"
source bin/activate
PS1="VIRTUAL[${_v}] \W (\$?)\\$ "
alias install="easy_install"
EOF
  bash --noprofile --rcfile "${py_env_rc}"
}

function py/env/create() {
  local _v=$*
  _v=${_v%%/}
  if empty "${_v}" ; then $failure ; fi

  if test -d "${_v}" ; then
    $failure
  fi

  answer "Create ${_v}?"
  if failed $? ; then
    $failure
  fi
  ${py_env} ${_v}
}

function py/env/install() {
  local _v=${1%%/}
  shift
  local _p=$*
  if empty "${_v}" || empty "${_p}" ; then
    $failure
  fi

  if ! test -d "${_v}" ; then
    $failure
  fi

  answer "Install to ${_v}: ${_p}?"
  if failed $? ; then
    $failure
  fi
  ${py_env_pip} -E ${_v} install -U ${_p}
}

function py/env/source() {
  local _v=${1%%/}
  shift
  local _p=$*
  if empty "${_v}" || empty "${_p}" ; then
    $failure
  fi

  if ! test -d "${_v}" ; then
    $failure
  fi

  answer "Install to ${_v}: ${_p}?"
  if failed $? ; then
    $failure
  fi
  ${py_env_pip} -E ${_v} install -e ${_p}
}

function py/env/pkgs() {
  local _v=${1%%/}
  if empty "${_v}" ; then
    $failure
  fi

  local _yolk="${_v}/bin/yolk"
  if ! test -x "${_yolk}" ; then
    msg "Not found: ${_yolk}"
    $failure
  fi
  ${_yolk} -l
}

function py/env/start() {
  import sys/dir
  local _env=${1%%/}
  shift
  local _s=$*
  if empty "${_env}" || empty "${_s}" ; then
    $failure
  fi

  if ! test -d "${_env}" ; then
    $failure
  fi

  # nginx port
  local _ngpo=$(u/split "${_s}" 1 ":")
  if test "${_ngpo}" = "${_s}" ; then
    _ngpo="8000"
  fi

  # gunicorn port
  local _gupo=$(u/split "${_s}" 2 ":")
  if test "${_gupo}" = "${_s}" ; then
    _gupo="29000"
  fi

  # check for running nginx


  answer "Start ngnix on ${_env}?"
  if failed $? ; then $failure ; fi

  local _pre="${_env}/${py_env_nginx_dir}"
  sys/dir/mk "${_pre}"
  sys/dir/mk "${_pre}/log"
  local _pre=$(ns/path "${_pre}")

  # TODO: hardcoded error_log
  local _cfg="${_pre}/nginx.conf"
  cat << EOF > "${_cfg}"

pid ${_pre}/pid;
error_log /dev/null crit;
worker_processes  1;
events {
  worker_connections  128;
}

daemon off;
http {
server {
  listen ${_ngpo};
  server_name localhost;
  error_log ${_pre}/log/error;
  access_log ${_pre}/log/access;
  location / {
    proxy_pass http://127.0.0.1:${_gupo};
  }
}}
EOF

  ${py_env_nginx} -c "${_cfg}" -p "${_pre}"
}
